âœ… Goals:
Implement Email & Password Authentication

Integrate Google Sign-In

Store users in Supabase database

Redirect to onboarding if not completed

ðŸ“Œ 1. Create Supabase Project & Enable Auth
Go to Supabase and create a project.

Navigate to Authentication â†’ Providers â†’ Google.

Enable Google authentication.

Set Authorized Redirect URL to:

bash
Copy
Edit
https://your-project.supabase.co/auth/v1/callback
Copy Google Client ID & Secret from Google Cloud Console and paste them into Supabase.

ðŸ“Œ 2. Set Up Supabase Client
Install Supabase SDK in your project:

bash
Copy
Edit
npm install @supabase/supabase-js
Create a file supabaseClient.js:

javascript
Copy
Edit
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

export const supabase = createClient(supabaseUrl, supabaseAnonKey);
Add these to .env.local:

env
Copy
Edit
NEXT_PUBLIC_SUPABASE_URL=your-supabase-url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key
NEXT_PUBLIC_GOOGLE_CLIENT_ID=your-google-client-id
NEXT_PUBLIC_GOOGLE_CLIENT_SECRET=your-google-client-secret
ðŸ“Œ 3. Implement Email & Google Auth
Create Auth.tsx:

javascript
Copy
Edit
import { supabase } from '../supabaseClient';

export const signInWithGoogle = async () => {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'google',
    options: { redirectTo: window.location.origin },
  });
  if (error) console.error('Google Sign-In Error:', error);
  return data;
};

export const signInWithEmail = async (email, password) => {
  const { data, error } = await supabase.auth.signInWithPassword({ email, password });
  if (error) console.error('Email Sign-In Error:', error);
  return data;
};

export const signUpWithEmail = async (email, password) => {
  const { data, error } = await supabase.auth.signUp({ email, password });
  if (error) console.error('Sign-Up Error:', error);
  return data;
};
ðŸ“Œ 4. Redirect to Onboarding After Login
Modify handleAuthSuccess:

javascript
Copy
Edit
import { supabase } from '../supabaseClient';
import { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';

const AuthRedirect = () => {
  const navigate = useNavigate();

  useEffect(() => {
    const checkUser = async () => {
      const { data: { user } } = await supabase.auth.getUser();
      if (user) {
        const { data } = await supabase.from('users').select('onboarding_complete').eq('id', user.id).single();
        if (data?.onboarding_complete) {
          navigate('/dashboard');
        } else {
          navigate('/onboarding');
        }
      }
    };
    checkUser();
  }, []);

  return null;
};

export default AuthRedirect;
ðŸ“Œ 5. Fetch Registered Users for Community List
Create Community.tsx:

javascript
Copy
Edit
import { useEffect, useState } from 'react';
import { supabase } from '../supabaseClient';

const Community = () => {
  const [users, setUsers] = useState([]);

  useEffect(() => {
    const fetchUsers = async () => {
      const { data, error } = await supabase.from('users').select('id, name, avatar_url').eq('onboarding_complete', true);
      if (!error) setUsers(data);
    };
    fetchUsers();
  }, []);

  return (
    <div>
      <h2>Community List</h2>
      <ul>
        {users.map((user) => (
          <li key={user.id}>
            <img src={user.avatar_url} alt={user.name} width="40" height="40" />
            {user.name}
          </li>
        ))}
      </ul>
    </div>
  );
};

export default Community;
