**Replit Guide for Real-Time Chat System**

---

### **✅ Remaining Tasks for Full Real-Time Chat System**

#### **1️⃣ Frontend Integration**

🔹 **Connect the Database Logic to the UI**
- Ensure the chat UI components fetch, send, and display messages properly.
- The chat input field should support text, images, emojis, and file uploads.
- Implement API calls to Supabase to retrieve chat messages.

🔹 **Real-Time Message Updates**
- Use `listenForNewMessages(chatId, callback)` to update messages in real time.
- Ensure new messages appear instantly without refreshing the page.

🔹 **Read Receipts (Seen Messages)**
- Call `markMessageAsSeen(messageId, userId)` when a message is opened.
- Display **✓✓ (double tick)** for seen messages.

🔹 **New Message Notifications**
- Display alert badges or sound alerts when new messages arrive.

---

#### **2️⃣ User Presence & Status**

🔹 **Online/Offline Tracking**
- Call `setUserOnline(userId)` when a user opens chat.
- Call `setUserOffline(userId)` when a user closes chat or logs out.
- Use `listenForUserStatus(callback)` to update the UI when users go online/offline.

🔹 **Last Seen Implementation**
- Display "Last seen at [time]" for offline users.
- Ensure it updates when a user goes offline.

---

#### **3️⃣ Chat Room Functionality**

🔹 **Allow Users to Create New Chats**
- UI should include a "New Chat" button to start conversations.
- Insert a new row in the `chats` table when a new chat is created.

🔹 **Show Active Chats**
- Fetch all chats where `user_id` is involved.
- Display the chat list in the sidebar.

🔹 **Lazy Loading Messages**
- Fetch only the latest **20 messages** when opening a chat.
- Implement **scroll-to-load** older messages.

---

#### **4️⃣ Media Uploads (Images, Files, Emojis)**

🔹 **Enable Image/File Upload**
- Store images/files in **Supabase Storage**.
- Modify `sendMessage()` to support media uploads.

🔹 **Emoji Picker**
- Use an emoji picker component in the UI.
- Ensure emojis are properly displayed in messages.

---

#### **5️⃣ Final Testing & Deployment**

🔹 **Test Everything:**
- ✅ Real-time messaging
- ✅ Online/offline tracking
- ✅ Last seen status
- ✅ Message notifications
- ✅ Read receipts
- ✅ File & emoji support
- ✅ UI responsiveness

🔹 **Deploy on Replit & Ensure No Syntax Errors**
- Run and verify that all features work smoothly.

---

### **📌 Replit Execution Notes**

💡 **Important Guidelines for Replit Implementation:**
1️⃣ **DO NOT modify the database schema or break existing imports**.
2️⃣ **UI must already be available—connect the backend only**.
3️⃣ **Ensure real-time events are correctly handled**.
4️⃣ **No unnecessary logs or debug statements in production**.

🚀 Once done, let me know if you need extra features!

