To allow Google OAuth to work both locally and in production, follow these steps:

üõ†Ô∏è 1. Configure Supabase for Both Local & Production
Go to Supabase Dashboard ‚Üí Your Project ‚Üí Authentication ‚Üí URL Configuration

üîπ Add these URLs under "Redirect URLs"

bash
Copy
Edit
http://localhost:3000/auth/callback
https://roshlingua.vercel.app/auth/callback
‚úÖ This ensures that Google OAuth can redirect correctly in both environments.

üõ†Ô∏è 2. Modify Google Sign-In Logic (Dynamic Redirect)
Now, update your Google sign-in function so that it dynamically chooses the right URL based on the environment.

üîπ Auth.tsx (or wherever your Google sign-in button is)

tsx
Copy
Edit
import { supabase } from "@/lib/supabaseClient";

const signInWithGoogle = async () => {
  const redirectTo =
    window.location.hostname === "localhost"
      ? "http://localhost:3000/auth/callback"
      : "https://roshlingua.vercel.app/auth/callback";

  const { error } = await supabase.auth.signInWithOAuth({
    provider: "google",
    options: { redirectTo },
  });

  if (error) {
    console.error("Google Sign-In Error:", error);
  }
};
‚úÖ This will automatically switch between local (localhost) and production (vercel.app) URLs.

üõ†Ô∏è 3. Ensure Redirect Works Properly (Fix Auth Callback)
Modify your OAuth callback handler to correctly check user details and redirect.

üîπ AuthCallback.tsx

tsx
Copy
Edit
import { useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { supabase } from "@/lib/supabaseClient";

const AuthCallback = () => {
  const navigate = useNavigate();

  useEffect(() => {
    const checkUser = async () => {
      const { data: session } = await supabase.auth.getSession();

      if (!session || !session.session) {
        console.error("No active session. Redirecting to home.");
        navigate("/");
        return;
      }

      const user = session.session.user;

      // Fetch user profile
      const { data: profile, error } = await supabase
        .from("profiles")
        .select("onboarding_completed")
        .eq("id", user.id)
        .single();

      if (error || !profile) {
        console.warn("Profile not found. Redirecting to onboarding.");
        navigate("/onboarding");
        return;
      }

      if (!profile.onboarding_completed) {
        console.log("User has not completed onboarding. Redirecting...");
        navigate("/onboarding");
      } else {
        navigate("/dashboard");
      }
    };

    checkUser();
  }, [navigate]);

  return <p>Redirecting...</p>;
};

export default AuthCallback;
‚úÖ Now, after Google sign-in:

If the profile is missing ‚Üí Redirects to /onboarding

If onboarding is incomplete ‚Üí Stays on /onboarding

If onboarding is complete ‚Üí Redirects to /dashboard

üõ†Ô∏è 4. Test in Both Environments
Local Testing
Run your app on localhost:3000

Click "Sign in with Google"

Check if it redirects to http://localhost:3000/auth/callback

Ensure you land on /onboarding or /dashboard correctly

Production Testing
Deploy your app to Vercel

Go to https://roshlingua.vercel.app

Click "Sign in with Google"

Ensure it redirects correctly

‚úÖ If testing passes, your setup is now correct! üöÄ

Final Setup Summary
‚úÖ Supabase has both local & production redirect URLs
‚úÖ Frontend dynamically selects the right redirect URL
‚úÖ Auth callback correctly checks onboarding status & redirects